Analizamos las formas normales de las tablas dadas;

Establecimientos Educativos:
No cumple la primer forma normal (1FN), ya que el atributo 'Domicilio' no es un atributo atomico. 
Es multivaluado ya que representa el valor de 'Calle', 'numero' y 'Localidad'.

* Establecimientos Productivos:
Cumple la primer forma normal (1FN), todos sus atributos son atomicos.
No cumple con la segunda forma normal (2FN) ya que por ejemplo, 
la dependencia funcional: 'in_departamentos' -> 'departamentos' es una dependencia parcial, 
dado que 'departamentos' es un atributo no primo que depende de solo un atributo de la clave conformada por: 
'anio','in_departamentos','clae6' y 'genero' (revisar,nose si esta bien justificado esto...)

Grafico de porque no cumple 2FN:
[anio] [in_departamentos] [departamentos] [provincia_id] [provincia] [clae6] [clae2] [letra] [genero] [empleo] [establecimiento] [empresas_exportadoras]
¯¯¯¯¯   ¯¯¯¯¯¯¯¯¯|¯¯¯¯¯¯¯       Ʌ                                   ¯¯¯¯¯¯¯                 ¯¯¯¯¯¯¯¯
                 |              |
                  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯


(auxiliar)
comprobé la clave de Establecimientos productivos con una consulta sql. No encontre ninguna otra clave minimal posible de la tabla
"Datos_por_departamento_actividad_y_sexo.csv"

adjunto codigo para correr en python:

"""
Este codigo comprueba que ninguna fila se repita al seleccionar las columnas
para verificar si funciona como clave.
@author: martina
"""

import pandas as pd
import duckdb as dd

carpeta = "/home/martina/Escritorio/tpLabo1/"

EstProd = pd.read_csv(carpeta+"Datos_por_departamento_actividad_y_sexo.csv")

#Compruedo mi CK 1
consultaSQL = """ SELECT anio, in_departamentos, clae6, genero, COUNT(*)
                  FROM EstProd
                  GROUP BY anio, in_departamentos, clae6, genero
                  HAVING COUNT(*) > 1
              """

dataframeResultado = dd.query(consultaSQL).df()
#print(dataframeResultado)
#Es CK!!

#Compruedo mi CK 2
consultaSQL = """ SELECT anio, departamento, clae6, genero, COUNT(*)
                  FROM EstProd
                  GROUP BY anio, departamento, clae6, genero
                  HAVING COUNT(*) > 1
              """

dataframeResultado = dd.query(consultaSQL).df()
print(dataframeResultado)
#NO ES CK :( 




Problemas de calidad de datos:
Establecimientos educativos:
- Códigos de área/números de telefono/dirección/ "null"
- Nulls que no son nulls sino que son espacios o ceros, o un 1
- Valores faltantes (nulls/espacios)
- Hay 1661 colegios sin modalidad según este código: (mentira, son de servicios complementarios)

consulta = """
            SELECT COUNT(Común), COUNT(Especial), COUNT(Adultos), COUNT(Artística), COUNT(Hospitalaria), COUNT(Intercultural), COUNT(Encierro)
            FROM establecimientos_educativos
            WHERE Común = '1'  OR Especial = '1' OR Adultos = '1' OR Artística = '1' OR Hospitalaria = '1' OR Intercultural = '1' OR Encierro = '1'
"""

dataframeResultado = dd.query(consulta).df()
print(dataframeResultado)


consulta = """
            SELECT Común, Especial, Adultos, Artística, Hospitalaria, Intercultural, Encierro
            FROM establecimientos_educativos
            WHERE Común != '1'  AND Especial != '1' AND Adultos != '1' AND Artística != '1' AND Hospitalaria != '1' AND Intercultural != '1' AND Encierro != '1'
"""




Resulta que según esta función, no hay valores null en el df, sino que son espacios o algo:

cant_nulls = 0
for columna in establecimientos_educativos.columns:
    consulta = f'SELECT COUNT("{columna}") FROM establecimientos_educativos WHERE "{columna}" IS NULL'
    df = dd.query(consulta).df()
    cant_nulls += int(df.iloc[0, 0])
print(cant_nulls)



Problemas de calidad:
Tanto en EE (establecimientos educativos) como en EP(establecimientos productivos), no coinciden todos los nombres de departamento ni nombre de provincia. Atributo de consistencia. Problema de Instancia.
Metrica para evaluar: (hay que codearlo)
contar cuantas filas coinciden entre las columnas EE(nombre departamento) y EP(nombre departamento). Sacar un porcentaje sobre el total
limpieza:
podemos 
1)tomar los nombre de una tabla y copiarlos en la otra o
2) buscar una lista de nombres de provincia y nombre de departamento por id's y joinearlo a ambas tablas.

en EP hay otro problema de consistencia en los id de departamento, ya que se ve que agregan un 0 cuando el id es mas chico, pero en otros datasets como padron_población los id no vienen con el 0 adelante. problema de instancia.
metrica para evaluar:(hay que codearlo)
igual que antes contar cuantas filas coinciden entre columas EP(id_departamento) y PP(area). y sacar el porcentaje sobre el total de las filas.
limpieza:
1)agregarle el cero al dataframe de padron_poblacion o
2)sacarle el cero al dataframe de EP

EE no cuenta con id_departamento, solo con nombre de departamento. Esto es un problema de completitud ademas de consistencia, ya que al tener varios posibilidades de string para un mismo nombre departamento, tendria que contar con un codigo id para saber de que departamento se esta refiriendo. Ademas de contar con varios departamentos con nombres parecidos como: capital o Gral San Martin  problema de modelo de datos
metrica: (hay q codearlo)
mirando solo columna de departamentos, buscar cuantos departamentos coinciden (no creo que sean iguales, pero que sean parecidos, podemos usar re).
sacar porcentaje.

limpieza, agregarle el id a la tabla y que coincida con el nombre del departamento correspondiente.

EP cuenta con Clae6, Clae2 y Letra. Es redundante, puedo sacar el clae2 y Letra a partir del clae6. Solo me tomaria una consulta con la tabla diccionario de claes. Tengos dos columnas de mas. atributo de relevancia. problema de ...





